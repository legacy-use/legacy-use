"""Add API definition models with versioning

Revision ID: 7b6afb9d7ea4
Revises: 222c1b640d27
Create Date: 2025-03-12 22:28:06.237529

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision: str = '7b6afb9d7ea4'
down_revision: Union[str, None] = '222c1b640d27'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name: str) -> bool:
    """Check if a table exists using database-agnostic method."""
    conn = op.get_bind()
    inspector = inspect(conn)
    return table_name in inspector.get_table_names()


def column_exists(table: str, column: str) -> bool:
    """Check if a column exists in a table using database-agnostic method."""
    conn = op.get_bind()
    inspector = inspect(conn)
    columns = [col['name'] for col in inspector.get_columns(table)]
    return column in columns


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create api_definitions table if it doesn't exist
    if not table_exists('api_definitions'):
        op.create_table(
            'api_definitions',
            sa.Column('id', sa.TEXT(), nullable=False),
            sa.Column('name', sa.String(), nullable=False),
            sa.Column('description', sa.String(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.Column('is_archived', sa.Boolean(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('name'),
        )

    # Create api_definition_versions table if it doesn't exist
    if not table_exists('api_definition_versions'):
        op.create_table(
            'api_definition_versions',
            sa.Column('id', sa.TEXT(), nullable=False),
            sa.Column('api_definition_id', sa.TEXT(), nullable=False),
            sa.Column('version_number', sa.String(), nullable=False),
            sa.Column('parameters', sa.JSON(), nullable=False),
            sa.Column('prompt', sa.String(), nullable=False),
            sa.Column('prompt_cleanup', sa.String(), nullable=False),
            sa.Column('response_example', sa.JSON(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=True),
            sa.ForeignKeyConstraint(
                ['api_definition_id'],
                ['api_definitions.id'],
            ),
            sa.PrimaryKeyConstraint('id'),
        )

    # Add api_definition_version_id to jobs table if it doesn't exist
    if not column_exists('jobs', 'api_definition_version_id'):
        # First, just add the column without the foreign key
        try:
            op.add_column(
                'jobs', sa.Column('api_definition_version_id', sa.TEXT(), nullable=True)
            )

            # Add foreign key constraint for PostgreSQL
            try:
                op.create_foreign_key(
                    'fk_jobs_api_definition_version_id',
                    'jobs',
                    'api_definition_versions',
                    ['api_definition_version_id'],
                    ['id'],
                    ondelete='SET NULL',
                )
            except Exception as e:
                print(f'Note: Could not create foreign key constraint: {e}')
        except Exception as e:
            print(f'Error adding column: {e}')
            # If there's an error, it might be because the column already exists
            pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key and column from jobs table
    if column_exists('jobs', 'api_definition_version_id'):
        try:
            # Drop the foreign key constraint first
            try:
                op.drop_constraint(
                    'fk_jobs_api_definition_version_id', 'jobs', type_='foreignkey'
                )
            except Exception as e:
                print(f'Note: Could not drop foreign key constraint: {e}')

            # Then drop the column
            op.drop_column('jobs', 'api_definition_version_id')
        except Exception as e:
            print(f'Error dropping column: {e}')
            pass  # Ignore errors if constraint or column doesn't exist

    # Drop api_definition_versions table if it exists
    if table_exists('api_definition_versions'):
        try:
            op.drop_table('api_definition_versions')
        except Exception as e:
            print(f'Error dropping api_definition_versions table: {e}')
            pass  # Ignore errors if table doesn't exist

    # Drop api_definitions table if it exists
    if table_exists('api_definitions'):
        try:
            op.drop_table('api_definitions')
        except Exception as e:
            print(f'Error dropping api_definitions table: {e}')
            pass  # Ignore errors if table doesn't exist
    # ### end Alembic commands ###
