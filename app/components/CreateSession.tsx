import {
  Alert,
  Box,
  Button,
  CircularProgress,
  Container,
  FormControl,
  FormHelperText,
  InputLabel,
  MenuItem,
  Paper,
  Select,
  Typography,
} from '@mui/material';
import { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { createSession, getTargets } from '../services/apiService';

// Add browser globals
const { URLSearchParams } = globalThis;

const CreateSession = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const [sessionData, setSessionData] = useState({
    name: 'auto-generated by UI',
    target_id: '',
  });
  const [targets, setTargets] = useState([]);
  const [loading, setLoading] = useState(false);
  const [targetsLoading, setTargetsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  useEffect(() => {
    const fetchTargets = async () => {
      try {
        setTargetsLoading(true);
        const targetsData = await getTargets();
        setTargets(targetsData);

        // Check for target parameter in URL
        const params = new URLSearchParams(location.search);
        const targetId = params.get('target');

        if (targetId && targetsData.some(t => t.id === targetId)) {
          setSessionData(prev => ({
            ...prev,
            target_id: targetId,
          }));
        } else if (targetsData.length > 0) {
          setSessionData(prev => ({
            ...prev,
            target_id: targetsData[0].id,
          }));
        }

        setTargetsLoading(false);
      } catch (err) {
        console.error('Error fetching targets:', err);
        setError('Failed to load targets. Please try again later.');
        setTargetsLoading(false);
      }
    };

    fetchTargets();
  }, [location.search]);

  const handleChange = e => {
    const { name, value } = e.target;
    setSessionData(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async e => {
    e.preventDefault();

    if (!sessionData.target_id) {
      setError('Target is required');
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const createdSession = await createSession(sessionData);

      setSuccess(true);
      setLoading(false);

      // Redirect to target detail page with the session preselected
      setTimeout(() => {
        navigate(`/targets/${sessionData.target_id}?sessionId=${createdSession.id}`);
      }, 1500);
    } catch (err) {
      console.error('Error creating session:', err);

      // Handle specific conflict error for existing active session
      if (err.status === 409 && err.detail && err.detail.existing_session) {
        const existingSession = err.detail.existing_session;
        const formattedDate = new Date(existingSession.created_at).toLocaleString();
        setError(
          <div>
            <strong>Cannot create session:</strong> An active session already exists for this
            target.
            <br />
            <br />
            <strong>Existing session details:</strong>
            <br />• Name: {existingSession.name}
            <br />• State: {existingSession.state}
            <br />• Status: {existingSession.status}
            <br />• Created: {formattedDate}
            <br />
            <br />
            Please archive the existing session first, or{' '}
            <Button
              size="small"
              variant="outlined"
              onClick={() =>
                navigate(`/targets/${sessionData.target_id}?sessionId=${existingSession.id}`)
              }
              sx={{ ml: 1 }}
            >
              Go to existing session
            </Button>
          </div>,
        );
      } else {
        setError(`Failed to create session: ${err.message || 'Unknown error'}`);
      }
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm">
      <Paper sx={{ p: 4, mt: 4 }}>
        <Typography variant="h4" gutterBottom align="center">
          Create New Session
        </Typography>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ mb: 3 }}>
            Session created successfully! Redirecting...
          </Alert>
        )}

        <form onSubmit={handleSubmit}>
          <FormControl
            fullWidth
            margin="normal"
            required
            disabled={targetsLoading || loading || success}
          >
            <InputLabel id="target-select-label">Target</InputLabel>
            <Select
              labelId="target-select-label"
              id="target-select"
              name="target_id"
              value={sessionData.target_id}
              onChange={handleChange}
              label="Target"
            >
              {targetsLoading ? (
                <MenuItem value="">
                  <em>Loading targets...</em>
                </MenuItem>
              ) : targets.length > 0 ? (
                targets.map(target => {
                  const isActive = target.has_active_session;
                  const isInitializing = target.has_initializing_session;
                  let statusText = '';
                  if (isActive) statusText = ' (Active session)';
                  else if (isInitializing) statusText = ' (Initializing session)';
                  return (
                    <MenuItem
                      key={target.id}
                      value={target.id}
                      disabled={isActive || isInitializing}
                    >
                      <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                        <span>
                          {target.name || target.id}
                          {statusText}
                        </span>
                        {(isActive || isInitializing) && (
                          <Typography variant="caption" color="text.secondary">
                            {isActive
                              ? 'A session is currently active for this target.'
                              : 'A session is initializing for this target.'}
                          </Typography>
                        )}
                      </Box>
                    </MenuItem>
                  );
                })
              ) : (
                <MenuItem value="">
                  <em>No targets available</em>
                </MenuItem>
              )}
            </Select>
            <FormHelperText>Select a target for this session</FormHelperText>
          </FormControl>

          <Box sx={{ mt: 4, display: 'flex', justifyContent: 'space-between' }}>
            <Button
              variant="outlined"
              onClick={() => navigate('/sessions')}
              disabled={loading || success}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="contained"
              color="primary"
              disabled={loading || success || targetsLoading || !sessionData.target_id}
              startIcon={loading && <CircularProgress size={20} color="inherit" />}
            >
              {loading ? 'Creating...' : 'Create Session'}
            </Button>
          </Box>
        </form>
      </Paper>
    </Container>
  );
};

export default CreateSession;
