/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * AI API Gateway
 * API Gateway for AI-powered endpoints
 * OpenAPI spec version: 1.0.0
 */
import { customInstance } from './custom-axios';
export type APIDefinitionResponseExample = { [key: string]: unknown };

export interface APIDefinition {
  name: string;
  description: string;
  parameters?: Parameter[];
  response_example?: APIDefinitionResponseExample;
  is_archived?: boolean;
}

/**
 * The tool to use to complete the action
 */
export type ActionStepTool = (typeof ActionStepTool)[keyof typeof ActionStepTool];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActionStepTool = {
  type: 'type',
  press_key: 'press_key',
  click: 'click',
  scroll_up: 'scroll_up',
  scroll_down: 'scroll_down',
  ui_not_as_expected: 'ui_not_as_expected',
  extract_tool: 'extract_tool',
} as const;

export interface ActionStep {
  /** A short title summing up the user intent for the action, e.g. "Open settings menu" */
  title: string;
  /** Describe the action the user took to complete the task, formulated as instruction for the operator. Replace concrete values, inputs and selections with {...} placeholders based on the parameters of the API call, in particular dates, names, texts, values, etc. */
  instruction: string;
  /** The tool to use to complete the action */
  tool: ActionStepTool;
}

export interface BodyAnalyzeVideoTeachingModeAnalyzeVideoPost {
  video: Blob;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type ImportApiDefinitionBodyRecoveryPrompt = string | null;

export type ImportApiDefinitionBodyResponseExample = { [key: string]: unknown };

export interface ImportApiDefinitionBody {
  name: string;
  description: string;
  parameters: Parameter[];
  prompt: string;
  prompt_cleanup: string;
  recovery_prompt?: ImportApiDefinitionBodyRecoveryPrompt;
  response_example: ImportApiDefinitionBodyResponseExample;
}

export interface ImportApiDefinitionRequest {
  api_definition: ImportApiDefinitionBody;
}

export type JobSessionId = string | null;

export type JobParameters = { [key: string]: string | unknown[] };

export type JobResultAnyOf = { [key: string]: unknown };

export type JobResult = JobResultAnyOf | null;

export type JobError = string | null;

export type JobCompletedAt = string | null;

export type JobApiExchangesItem = { [key: string]: unknown };

export type JobApiDefinitionVersionId = string | null;

export type JobTotalInputTokens = number | null;

export type JobTotalOutputTokens = number | null;

export type JobDurationSeconds = number | null;

export interface Job {
  id?: string;
  target_id: string;
  session_id?: JobSessionId;
  api_name: string;
  parameters?: JobParameters;
  status?: JobStatus;
  result?: JobResult;
  error?: JobError;
  created_at?: string;
  updated_at?: string;
  completed_at?: JobCompletedAt;
  api_exchanges?: JobApiExchangesItem[];
  api_definition_version_id?: JobApiDefinitionVersionId;
  total_input_tokens?: JobTotalInputTokens;
  total_output_tokens?: JobTotalOutputTokens;
  duration_seconds?: JobDurationSeconds;
}

export type JobCreateParameters = { [key: string]: string | unknown[] };

export interface JobCreate {
  api_name: string;
  parameters?: JobCreateParameters;
  status?: JobStatus;
}

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobStatus = {
  pending: 'pending',
  queued: 'queued',
  running: 'running',
  recovery: 'recovery',
  paused: 'paused',
  success: 'success',
  failed: 'failed',
  error: 'error',
  canceled: 'canceled',
} as const;

export interface PaginatedJobsResponse {
  total_count: number;
  jobs: Job[];
}

export type ParameterDefault = string | unknown[] | null;

export interface Parameter {
  name: string;
  type: string;
  description: string;
  default?: ParameterDefault;
}

export type ProviderConfigurationCredentials = { [key: string]: string | null };

/**
 * Configuration for a VLM provider.
 */
export interface ProviderConfiguration {
  provider: string;
  name: string;
  default_model: string;
  available: boolean;
  description: string;
  credentials: ProviderConfigurationCredentials;
}

/**
 * Response model for providers endpoint.
 */
export interface ProvidersResponse {
  current_provider: string;
  providers: ProviderConfiguration[];
}

export type TargetUsername = string | null;

export type TargetPort = number | null;

export type TargetVpnConfig = string | null;

export type TargetVpnUsername = string | null;

export type TargetVpnPassword = string | null;

export type TargetRdpParams = string | null;

export type TargetQueueStatus = string | null;

export type TargetBlockingJobsAnyOfItem = { [key: string]: unknown };

export type TargetBlockingJobs = TargetBlockingJobsAnyOfItem[] | null;

export type TargetHasBlockingJobs = boolean | null;

export type TargetBlockingJobsCount = number | null;

export type TargetHasActiveSession = boolean | null;

export type TargetHasInitializingSession = boolean | null;

export interface Target {
  id?: string;
  name: string;
  type: TargetType;
  host: string;
  username?: TargetUsername;
  password: string;
  port?: TargetPort;
  vpn_config?: TargetVpnConfig;
  vpn_username?: TargetVpnUsername;
  vpn_password?: TargetVpnPassword;
  width?: number;
  height?: number;
  created_at?: string;
  updated_at?: string;
  is_archived?: boolean;
  rdp_params?: TargetRdpParams;
  queue_status?: TargetQueueStatus;
  blocking_jobs?: TargetBlockingJobs;
  has_blocking_jobs?: TargetHasBlockingJobs;
  blocking_jobs_count?: TargetBlockingJobsCount;
  has_active_session?: TargetHasActiveSession;
  has_initializing_session?: TargetHasInitializingSession;
}

export type TargetCreateUsername = string | null;

export type TargetCreatePort = number | null;

export type TargetCreateVpnConfig = string | null;

export type TargetCreateVpnUsername = string | null;

export type TargetCreateVpnPassword = string | null;

export type TargetCreateRdpParams = string | null;

export interface TargetCreate {
  name: string;
  type: TargetType;
  host: string;
  username?: TargetCreateUsername;
  password: string;
  port?: TargetCreatePort;
  vpn_config?: TargetCreateVpnConfig;
  vpn_username?: TargetCreateVpnUsername;
  vpn_password?: TargetCreateVpnPassword;
  width?: number;
  height?: number;
  rdp_params?: TargetCreateRdpParams;
}

export type TargetType = (typeof TargetType)[keyof typeof TargetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TargetType = {
  rdp: 'rdp',
  vnc: 'vnc',
  teamviewer: 'teamviewer',
  'vnc+tailscale': 'vnc+tailscale',
  'vnc+wireguard': 'vnc+wireguard',
  rdp_wireguard: 'rdp_wireguard',
  'rdp+tailscale': 'rdp+tailscale',
  'rdp+openvpn': 'rdp+openvpn',
} as const;

export type TargetUpdateName = string | null;

export type TargetUpdateType = TargetType | null;

export type TargetUpdateHost = string | null;

export type TargetUpdateUsername = string | null;

export type TargetUpdatePassword = string | null;

export type TargetUpdatePort = number | null;

export type TargetUpdateVpnConfig = string | null;

export type TargetUpdateVpnUsername = string | null;

export type TargetUpdateVpnPassword = string | null;

export type TargetUpdateWidth = number | null;

export type TargetUpdateHeight = number | null;

export type TargetUpdateRdpParams = string | null;

export interface TargetUpdate {
  name?: TargetUpdateName;
  type?: TargetUpdateType;
  host?: TargetUpdateHost;
  username?: TargetUpdateUsername;
  password?: TargetUpdatePassword;
  port?: TargetUpdatePort;
  vpn_config?: TargetUpdateVpnConfig;
  vpn_username?: TargetUpdateVpnUsername;
  vpn_password?: TargetUpdateVpnPassword;
  width?: TargetUpdateWidth;
  height?: TargetUpdateHeight;
  rdp_params?: TargetUpdateRdpParams;
}

export type UpdateProviderRequestCredentials = { [key: string]: string };

/**
 * Request model for updating provider configuration.
 */
export interface UpdateProviderRequest {
  provider: string;
  credentials: UpdateProviderRequestCredentials;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Expected response from the automation
 */
export type VideoAnalysisResponseResponseExample = { [key: string]: unknown };

/**
 * Response model for video analysis
 */
export interface VideoAnalysisResponse {
  /** A short name for the automation */
  name: string;
  /** A short summary of the automation, remain high level */
  description: string;
  /** Describe the expected screen state, instruct the operator to get the system into the initial state. Then describe the actions the user took to complete the task in great detail, in particular which buttons or input fields are used, use the tools available to the model to describe the actions, follow the format of the HOW_TO_PROMPT.md file */
  actions: ActionStep[];
  /** Instructions to return the system to its original state */
  prompt_cleanup: string;
  /** Parameters and user input needed to run the automation another time with different values */
  parameters: Parameter[];
  /** Expected response from the automation */
  response_example: VideoAnalysisResponseResponseExample;
}

export type GetApiDefinitionsApiDefinitionsGetParams = {
  include_archived?: boolean;
};

export type UpdateApiDefinitionApiDefinitionsApiNamePut200 = { [key: string]: string };

export type ArchiveApiDefinitionApiDefinitionsApiNameDelete200 = { [key: string]: string };

export type ExportApiDefinitionApiDefinitionsApiNameExportGet200 = {
  [key: string]: { [key: string]: unknown };
};

export type ImportApiDefinitionApiDefinitionsImportPost200 = { [key: string]: string };

export type UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost200 = { [key: string]: string };

export type GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGet200 = {
  [key: string]: unknown;
};

export type ListTargetsTargetsGetParams = {
  include_archived?: boolean;
};

export type ListAllJobsJobsGetParams = {
  limit?: number;
  offset?: number;
  status?: string | null;
  target_id?: string | null;
  api_name?: string | null;
};

export type ListTargetJobsTargetsTargetIdJobsGetParams = {
  limit?: number;
  offset?: number;
};

export type UpdateProviderSettingsSettingsProvidersPost200 = { [key: string]: string };

/**
 * Get all available API definitions.
 * @summary Get Api Definitions
 */
export const getApiDefinitionsApiDefinitionsGet = (
  params?: GetApiDefinitionsApiDefinitionsGetParams,
) => {
  return customInstance<APIDefinition[]>({ url: `/api/definitions`, method: 'GET', params });
};

/**
 * Get a specific API definition by name.
 * @summary Get Api Definition
 */
export const getApiDefinitionApiDefinitionsApiNameGet = (apiName: string) => {
  return customInstance<APIDefinition>({ url: `/api/definitions/${apiName}`, method: 'GET' });
};

/**
 * Update an API definition.
 * @summary Update Api Definition
 */
export const updateApiDefinitionApiDefinitionsApiNamePut = (
  apiName: string,
  importApiDefinitionRequest: ImportApiDefinitionRequest,
) => {
  return customInstance<UpdateApiDefinitionApiDefinitionsApiNamePut200>({
    url: `/api/definitions/${apiName}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: importApiDefinitionRequest,
  });
};

/**
 * Archive an API definition (soft delete).
 * @summary Archive Api Definition
 */
export const archiveApiDefinitionApiDefinitionsApiNameDelete = (apiName: string) => {
  return customInstance<ArchiveApiDefinitionApiDefinitionsApiNameDelete200>({
    url: `/api/definitions/${apiName}`,
    method: 'DELETE',
  });
};

/**
 * Get a specific API definition in its raw format for export/backup purposes.
 * @summary Export Api Definition
 */
export const exportApiDefinitionApiDefinitionsApiNameExportGet = (apiName: string) => {
  return customInstance<ExportApiDefinitionApiDefinitionsApiNameExportGet200>({
    url: `/api/definitions/${apiName}/export`,
    method: 'GET',
  });
};

/**
 * Import an API definition from a JSON file.
 * @summary Import Api Definition
 */
export const importApiDefinitionApiDefinitionsImportPost = (
  importApiDefinitionRequest: ImportApiDefinitionRequest,
) => {
  return customInstance<ImportApiDefinitionApiDefinitionsImportPost200>({
    url: `/api/definitions/import`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: importApiDefinitionRequest,
  });
};

/**
 * Unarchive an API definition.
 * @summary Unarchive Api Definition
 */
export const unarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost = (apiName: string) => {
  return customInstance<UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost200>({
    url: `/api/definitions/${apiName}/unarchive`,
    method: 'POST',
  });
};

/**
 * Get metadata for a specific API definition, including archived status.
 * @summary Get Api Definition Metadata
 */
export const getApiDefinitionMetadataApiDefinitionsApiNameMetadataGet = (apiName: string) => {
  return customInstance<GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGet200>({
    url: `/api/definitions/${apiName}/metadata`,
    method: 'GET',
  });
};

/**
 * Analyze a video recording and generate an API definition for automation.

This endpoint accepts a video file upload, analyzes it using Google Vertex Gemini Pro,
and returns a structured API definition that can be used to automate the workflow
shown in the video.
 * @summary Analyze Video
 */
export const analyzeVideoTeachingModeAnalyzeVideoPost = (
  bodyAnalyzeVideoTeachingModeAnalyzeVideoPost: BodyAnalyzeVideoTeachingModeAnalyzeVideoPost,
) => {
  const formData = new FormData();
  formData.append(`video`, bodyAnalyzeVideoTeachingModeAnalyzeVideoPost.video);

  return customInstance<VideoAnalysisResponse>({
    url: `/teaching-mode/analyze-video`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
  });
};

/**
 * List all available targets.
 * @summary List Targets
 */
export const listTargetsTargetsGet = (params?: ListTargetsTargetsGetParams) => {
  return customInstance<Target[]>({ url: `/targets/`, method: 'GET', params });
};

/**
 * Create a new target.
 * @summary Create Target
 */
export const createTargetTargetsPost = (targetCreate: TargetCreate) => {
  return customInstance<Target>({
    url: `/targets/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: targetCreate,
  });
};

/**
 * Get details of a specific target.
 * @summary Get Target
 */
export const getTargetTargetsTargetIdGet = (targetId: string) => {
  return customInstance<Target>({ url: `/targets/${targetId}`, method: 'GET' });
};

/**
 * Update a target's configuration.
 * @summary Update Target
 */
export const updateTargetTargetsTargetIdPut = (targetId: string, targetUpdate: TargetUpdate) => {
  return customInstance<Target>({
    url: `/targets/${targetId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: targetUpdate,
  });
};

/**
 * Archive a target (soft delete).
 * @summary Delete Target
 */
export const deleteTargetTargetsTargetIdDelete = (targetId: string) => {
  return customInstance<unknown>({ url: `/targets/${targetId}`, method: 'DELETE' });
};

/**
 * Unarchive a target.
 * @summary Unarchive Target
 */
export const unarchiveTargetTargetsTargetIdUnarchivePost = (targetId: string) => {
  return customInstance<unknown>({ url: `/targets/${targetId}/unarchive`, method: 'POST' });
};

/**
 * List all jobs across all targets with pagination and filtering options.
 * @summary List All Jobs
 */
export const listAllJobsJobsGet = (params?: ListAllJobsJobsGetParams) => {
  return customInstance<PaginatedJobsResponse>({ url: `/jobs/`, method: 'GET', params });
};

/**
 * List all jobs for a specific target with pagination.
 * @summary List Target Jobs
 */
export const listTargetJobsTargetsTargetIdJobsGet = (
  targetId: string,
  params?: ListTargetJobsTargetsTargetIdJobsGetParams,
) => {
  return customInstance<Job[]>({ url: `/targets/${targetId}/jobs/`, method: 'GET', params });
};

/**
 * Create a new job for a target.

The endpoint will return immediately after adding the job to the queue.

Note: Jobs have a token usage limit of 15,000 tokens (combined input and output).
Jobs exceeding this limit will be automatically terminated.
 * @summary Create Job
 */
export const createJobTargetsTargetIdJobsPost = (targetId: string, jobCreate: JobCreate) => {
  return customInstance<Job>({
    url: `/targets/${targetId}/jobs/`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: jobCreate,
  });
};

/**
 * Get details of a specific job.
 * @summary Get Job
 */
export const getJobTargetsTargetIdJobsJobIdGet = (targetId: string, jobId: string) => {
  return customInstance<Job>({ url: `/targets/${targetId}/jobs/${jobId}`, method: 'GET' });
};

/**
 * Cancel a job and mark its status as 'canceled'.
 * @summary Cancel Job
 */
export const cancelJobTargetsTargetIdJobsJobIdCancelPost = (targetId: string, jobId: string) => {
  return customInstance<unknown>({
    url: `/targets/${targetId}/jobs/${jobId}/cancel/`,
    method: 'POST',
  });
};

/**
 * Get available VLM providers and their configurations.
 * @summary Get Providers
 */
export const getProvidersSettingsProvidersGet = () => {
  return customInstance<ProvidersResponse>({ url: `/settings/providers`, method: 'GET' });
};

/**
 * Update provider configuration and set as active provider.
 * @summary Update Provider Settings
 */
export const updateProviderSettingsSettingsProvidersPost = (
  updateProviderRequest: UpdateProviderRequest,
) => {
  return customInstance<UpdateProviderSettingsSettingsProvidersPost200>({
    url: `/settings/providers`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: updateProviderRequest,
  });
};

/**
 * @summary Scalar Html
 */
export const scalarHtmlSpecsGet = () => {
  return customInstance<unknown>({ url: `/specs/`, method: 'GET' });
};

/**
 * Get API specifications in OpenAPI format.

Returns all active API definitions from the database as OpenAPI compatible specifications.
 * @summary Get Openapi Specs
 */
export const getOpenapiSpecsSpecsOpenapiJsonGet = () => {
  return customInstance<unknown>({ url: `/specs/openapi.json`, method: 'GET' });
};

/**
 * Root endpoint.
 * @summary Root
 */
export const rootGet = () => {
  return customInstance<unknown>({ url: `/`, method: 'GET' });
};

export type GetApiDefinitionsApiDefinitionsGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionsApiDefinitionsGet>>
>;
export type GetApiDefinitionApiDefinitionsApiNameGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionApiDefinitionsApiNameGet>>
>;
export type UpdateApiDefinitionApiDefinitionsApiNamePutResult = NonNullable<
  Awaited<ReturnType<typeof updateApiDefinitionApiDefinitionsApiNamePut>>
>;
export type ArchiveApiDefinitionApiDefinitionsApiNameDeleteResult = NonNullable<
  Awaited<ReturnType<typeof archiveApiDefinitionApiDefinitionsApiNameDelete>>
>;
export type ExportApiDefinitionApiDefinitionsApiNameExportGetResult = NonNullable<
  Awaited<ReturnType<typeof exportApiDefinitionApiDefinitionsApiNameExportGet>>
>;
export type ImportApiDefinitionApiDefinitionsImportPostResult = NonNullable<
  Awaited<ReturnType<typeof importApiDefinitionApiDefinitionsImportPost>>
>;
export type UnarchiveApiDefinitionApiDefinitionsApiNameUnarchivePostResult = NonNullable<
  Awaited<ReturnType<typeof unarchiveApiDefinitionApiDefinitionsApiNameUnarchivePost>>
>;
export type GetApiDefinitionMetadataApiDefinitionsApiNameMetadataGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiDefinitionMetadataApiDefinitionsApiNameMetadataGet>>
>;
export type AnalyzeVideoTeachingModeAnalyzeVideoPostResult = NonNullable<
  Awaited<ReturnType<typeof analyzeVideoTeachingModeAnalyzeVideoPost>>
>;
export type ListTargetsTargetsGetResult = NonNullable<
  Awaited<ReturnType<typeof listTargetsTargetsGet>>
>;
export type CreateTargetTargetsPostResult = NonNullable<
  Awaited<ReturnType<typeof createTargetTargetsPost>>
>;
export type GetTargetTargetsTargetIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getTargetTargetsTargetIdGet>>
>;
export type UpdateTargetTargetsTargetIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateTargetTargetsTargetIdPut>>
>;
export type DeleteTargetTargetsTargetIdDeleteResult = NonNullable<
  Awaited<ReturnType<typeof deleteTargetTargetsTargetIdDelete>>
>;
export type UnarchiveTargetTargetsTargetIdUnarchivePostResult = NonNullable<
  Awaited<ReturnType<typeof unarchiveTargetTargetsTargetIdUnarchivePost>>
>;
export type ListAllJobsJobsGetResult = NonNullable<Awaited<ReturnType<typeof listAllJobsJobsGet>>>;
export type ListTargetJobsTargetsTargetIdJobsGetResult = NonNullable<
  Awaited<ReturnType<typeof listTargetJobsTargetsTargetIdJobsGet>>
>;
export type CreateJobTargetsTargetIdJobsPostResult = NonNullable<
  Awaited<ReturnType<typeof createJobTargetsTargetIdJobsPost>>
>;
export type GetJobTargetsTargetIdJobsJobIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getJobTargetsTargetIdJobsJobIdGet>>
>;
export type CancelJobTargetsTargetIdJobsJobIdCancelPostResult = NonNullable<
  Awaited<ReturnType<typeof cancelJobTargetsTargetIdJobsJobIdCancelPost>>
>;
export type GetProvidersSettingsProvidersGetResult = NonNullable<
  Awaited<ReturnType<typeof getProvidersSettingsProvidersGet>>
>;
export type UpdateProviderSettingsSettingsProvidersPostResult = NonNullable<
  Awaited<ReturnType<typeof updateProviderSettingsSettingsProvidersPost>>
>;
export type ScalarHtmlSpecsGetResult = NonNullable<Awaited<ReturnType<typeof scalarHtmlSpecsGet>>>;
export type GetOpenapiSpecsSpecsOpenapiJsonGetResult = NonNullable<
  Awaited<ReturnType<typeof getOpenapiSpecsSpecsOpenapiJsonGet>>
>;
export type RootGetResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>;
